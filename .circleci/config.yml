version: 2
jobs:
  build:
    docker:
      - image: circleci/buildpack-deps:18.04-curl
    steps:
      - checkout

      - setup_remote_docker:
          docker_layer_caching: false

      - run: 
          command: |
            set -x
            eval `aws ecr get-login --no-include-email --region $AWS_REGION`
            docker build --build-arg aws_region=${AWS_REGION} -t circleci:deployer .circleci/images
            docker tag circleci:deployer 303634175659.dkr.ecr.us-east-2.amazonaws.com/circleci:deployer
            docker push 303634175659.dkr.ecr.us-east-2.amazonaws.com/circleci:deployer

  build-ecscli:
    docker:
      - image: circleci/golang:1.10
    steps:
      - run: 
          command: |
            set -x
            # Thanks @bobziuchkovski
            git config --global url."https://${GIT_PASSWORD}:x-oauth-basic@github.com/".insteadOf "https://github.com/"
            mkdir -p /go/src/github.com/aws
            (cd /go/src/github.com/aws ; git clone -b my-branch https://github.com/dickmao/amazon-ecs-cli.git)
            # shlomi noach, code.openark.org
            (cd /go/src/github.com/aws/amazon-ecs-cli ; go get ./... && make)
      - save_cache:
          key: ecscli-{{ checksum "/go/src/github.com/aws/amazon-ecs-cli/.git/index" }}
          paths: 
            - /go/src/github.com/aws/amazon-ecs-cli

  push-redis-populate:
    docker:
      - image: 303634175659.dkr.ecr.us-east-2.amazonaws.com/circleci:deployer
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
    steps:
      - checkout
      - setup_remote_docker:   # (2)
          docker_layer_caching: false # (3)
      - run:
          command: |
            python ./redis-populate/docker-build.py

  ecs-up:
    docker:
      - image: 303634175659.dkr.ecr.us-east-2.amazonaws.com/circleci:deployer
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
    steps:
      - checkout
      - restore_cache:
          keys: ecscli
      - run:
          command: |
            set -x
            ./ecs-up.sh
      - persist_to_workspace:
          root: ecs-state
          paths:
            - "*"

  ecs-up-internet:
    docker:
      - image: 303634175659.dkr.ecr.us-east-2.amazonaws.com/circleci:deployer
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
    steps:
      - checkout
      - restore_cache:
          keys: ecscli
      - run:
          command: |
            set -x
            ./ecs-up.sh --internet
      - persist_to_workspace:
          root: ecs-state
          paths:
            - "*"

  ecs-compose-up-except-dedupe:
    docker:
      - image: 303634175659.dkr.ecr.us-east-2.amazonaws.com/circleci:deployer
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
    steps:
      - checkout
      - restore_cache:
          keys: ecscli
      - attach_workspace:
          at: ecs-state
      - run:
          command: |
            set -x
            ./ecs-compose-up.sh -x dedupe
      - persist_to_workspace:
          root: ecs-state
          paths:
            - "*"
      - persist_to_workspace:
          root: ../.cache
          paths:
            - "ecs-cli"

  ecs-compose-up-dedupe:
    docker:
      - image: 303634175659.dkr.ecr.us-east-2.amazonaws.com/circleci:deployer
    steps:
      - checkout
      - restore_cache:
          keys: ecscli
      - attach_workspace:
          at: ecs-state
      - attach_workspace:
          at: ~/.cache
      - run:
          command: |
            set -x
            ./ecs-compose-up.sh -s dedupe
      - persist_to_workspace:
          root: ../.cache
          paths:
            - "ecs-cli"

  once-dedupe:
    docker:
      - image: 303634175659.dkr.ecr.us-east-2.amazonaws.com/circleci:deployer
    steps:
      - checkout
      - restore_cache:
          keys: ecscli
      - attach_workspace:
          at: ecs-state
      - attach_workspace:
          at: ~/.cache
      - run:
          command: |
            set -x
            source ./bash_aliases.sh
            # I need /var/lib/scrapyd to be made by ecs-compose-up-except-dedupe
            # I can now touch digest there so that dedupe doesn't start processing any existing Data
            # Then when/if spiders update Marker, dedupe will act en masse
            for m in 0 1 ; do ssh-ecs $m sudo mkdir -p /efs/var/lib/scrapyd/items/tutorial/newyork \&\& sudo touch /efs/var/lib/scrapyd/items/tutorial/newyork/digest ; done
            ./ecs-compose-up.sh -s once-dedupe
      - persist_to_workspace:
          root: ../.cache
          paths:
            - "ecs-cli"

  login-node:
    docker:
      - image: 303634175659.dkr.ecr.us-east-2.amazonaws.com/circleci:deployer
    steps:
      - checkout
      - restore_cache:
          keys: ecscli
      - attach_workspace:
          at: ecs-state
      - attach_workspace:
          at: ~/.cache
      - run:
          command: |
            set -x
            source ./bash_aliases.sh

  spider-newyork:
    docker:
      - image: 303634175659.dkr.ecr.us-east-2.amazonaws.com/circleci:deployer
    steps:
      - checkout
      - attach_workspace:
          at: ecs-state
      - run:
          command: |
            set -x
            source ./bash_aliases.sh
            docke-ecs scrapyd-crawl "./wait-for-it.sh -t 500 scrapyd:6800 -- scrapyd-client -t http://scrapyd:6800 schedule -p tutorial newyork"
  
  spider-listingsproject: 
    docker:
      - image: 303634175659.dkr.ecr.us-east-2.amazonaws.com/circleci:deployer
    steps:
      - checkout
      - attach_workspace:
          at: ecs-state
      - run:
          command: |
            set -x
            source ./bash_aliases.sh
            docke-ecs scrapyd-crawl "./wait-for-it.sh -t 500 scrapyd:6800 -- scrapyd-client -t http://scrapyd:6800 schedule -p tutorial listingsproject"

  wait-for-digest:
    docker:
      - image: 303634175659.dkr.ecr.us-east-2.amazonaws.com/circleci:deployer
    steps:
      - checkout
      - attach_workspace:
          at: ecs-state
      - run:
          shell: "/bin/bash"
          command: |
            . ./bash_aliases.sh
            inprog=0
            log=$(ssh-ecs 0 date -r /efs/var/lib/scrapyd/logs/tutorial/newyork +%s)
            log=$(echo "${log//[$'\t\r\n']}")
            log=$(echo "${log//[!0-9]/}")
            while [ $inprog -lt 360 ] ; do
              sshout=$(ssh-ecs 0 find -L /efs/var/lib/scrapyd/items/tutorial/newyork/digest -newermt "@$log")
              if echo $sshout | grep -q digest ; then 
                echo Found digest later than $(date -d @$log)
                ssh-ecs 0 ls -l /efs/var/lib/scrapyd/items/tutorial/newyork/digest
                exit 0
              fi
              echo $inprog $log $sshout
              let inprog=inprog+1
              sleep 30
            done
            exit 1

  success-function:
    docker:
      - image: 303634175659.dkr.ecr.us-east-2.amazonaws.com/circleci:deployer
    steps:
      - checkout
      - attach_workspace:
          at: ecs-state
      - run:
          command: |
            set -x
            export ECS_CLUSTER=$(grep -f <(curl -sk https://circleci.com/api/v1.1/project/github/dickmao/deployer/tree/master?filter=successful |  jq -r 'map(select( .workflows | .workflow_name=="scheduled-up" )) | .[] | .workflows | .workflow_id[-4:]' | uniq) <(for c in $(aws ecs list-clusters | jq -r '.clusterArns[]') ; do basename $c ; done ) | head -1)
            source ./bash_aliases.sh
            docke-ecs ny-email bin/success-function -Dconfig.file=conf/sfbay.conf
            docke-ecs ny-email bin/success-function -Dconfig.file=conf/newyork.conf

  cron-spiders:
    docker:
      - image: 303634175659.dkr.ecr.us-east-2.amazonaws.com/circleci:deployer
    steps:
      - checkout
      - attach_workspace:
          at: ecs-state
      - run:
          command: |
            set -x
            source ./bash_aliases.sh
            docke-ecs scrapyd-crawl 'printf -- "\#!/bin/bash\ -l\\\\nschedule\ newyork\\\\n" \> /etc/cron.hourly/a \; chmod ugo+x /etc/cron.hourly/a'
            docke-ecs scrapyd-crawl 'printf -- "\#!/bin/bash\ -l\\\\nschedule\ listingsproject\\\\n" \> /etc/cron.hourly/b \; chmod ugo+x /etc/cron.hourly/b'
            docke-ecs scrapyd-crawl 'printf -- "\#!/bin/bash\ -l\\\\nschedule\ sfbay\\\\n" \> /etc/cron.hourly/c \; chmod ugo+x /etc/cron.hourly/c'
            docke-ecs scrapyd-crawl 'printf -- "\#!/bin/bash\ -l\\\\nschedule\ dead\\\\n" \> /etc/cron.hourly/d \; chmod ugo+x /etc/cron.hourly/d'

  ecs-compose-down:
    docker:
      - image: 303634175659.dkr.ecr.us-east-2.amazonaws.com/circleci:deployer
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
    steps:
      - checkout
      - restore_cache:
          keys: ecscli
      - attach_workspace:
          at: ecs-state
      - attach_workspace:
          at: ~/.cache
      - run:
          command: |
            set -x
            ./ecs-compose-down.sh
      - persist_to_workspace:
          root: ecs-state
          paths:
            - "*"

  ecs-down:
    docker:
      - image: 303634175659.dkr.ecr.us-east-2.amazonaws.com/circleci:deployer
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
    steps:
      - checkout
      - restore_cache:
          keys: ecscli
      - attach_workspace:
          at: ecs-state
      - attach_workspace:
          at: ~/.cache
      - run:
          command: |
            set -x
            ./ecs-down.sh
      - persist_to_workspace:
          root: ecs-state
          paths:
            - "*"

  ecs-down-all:
    docker:
      - image: 303634175659.dkr.ecr.us-east-2.amazonaws.com/circleci:deployer
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
    steps:
      - checkout
      - restore_cache:
          keys: ecscli
      - attach_workspace:
          at: ecs-state
      - attach_workspace:
          at: ~/.cache
      - run:
          command: |
            set -x
            ./ecs-down.sh --all
      - persist_to_workspace:
          root: ecs-state
          paths:
            - "*"

workflows:
  version: 2
  commit:
    jobs:
      - build-deployer-image
      - build-ecscli
      - ecs-up:
          requires:
            - build-deployer-image
            - build-ecscli
      - push-redis-populate:
          requires:
            - build-deployer-image
      - ecs-compose-up-except-dedupe:
          requires:
            - ecs-up
            - push-redis-populate
      - login-node:
          requires:
            - ecs-compose-up-except-dedupe
      - once-dedupe:
          requires:
            - ecs-compose-up-except-dedupe
      - spider-newyork:
          requires:
            - once-dedupe
      - spider-listingsproject:
          requires:
            - once-dedupe
      - wait-for-digest:
          requires:
            - spider-newyork
            - spider-listingsproject
      - ecs-compose-up-dedupe:
          requires:
            - wait-for-digest
      - hold:
          type: approval
          requires: 
            - wait-for-digest
      - ecs-compose-down:
          requires:
            - hold
      - ecs-down:
          requires:
            - ecs-compose-down
